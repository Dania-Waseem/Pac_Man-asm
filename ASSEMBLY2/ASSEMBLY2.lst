Microsoft (R) Macro Assembler Version 14.42.34436.0	    05/11/25 21:43:41
CODE.asm						     Page 1 - 1


				; 23i-2622
				; DS A
				; COAL SEMESTER PROJECT 



				include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				includelib winmm.lib  ; Windows multimedia library

				; the below are variables for sound (took help from internet to load sounds)

 = 00020000			SND_FILENAME      EQU 00020000h
 = 00000001			SND_ASYNC         EQU 00000001h
 = 00000000			SND_SYNC          EQU 00000000h
 = 00000000			NULL              EQU 0


				PlaySound PROTO STDCALL, 
				    pszSound:DWORD, 
				    hmod:DWORD, 
				    fdwSound:DWORD


 = 00000050			GAME_WIDTH = 80 
 = 0000005A			INFO_START = 90

 00000000			.data

 00000000 43 3A 5C 55 73	    midSound db "C:\Users\DELL\OneDrive\Desktop\game.wav",0
	   65 72 73 5C 44
	   45 4C 4C 5C 4F
	   6E 65 44 72 69
	   76 65 5C 44 65
	   73 6B 74 6F 70
	   5C 67 61 6D 65
	   2E 77 61 76 00
 00000028 43 3A 5C 55 73	    PacmanIntro db "C:\Users\DELL\OneDrive\Desktop\pacman_beginning.wav",0
	   65 72 73 5C 44
	   45 4C 4C 5C 4F
	   6E 65 44 72 69
	   76 65 5C 44 65
	   73 6B 74 6F 70
	   5C 70 61 63 6D
	   61 6E 5F 62 65
	   67 69 6E 6E 69
	   6E 67 2E 77 61
	   76 00

 0000005C 53 6F 75 6E 64	    SoundError db "Sound file not found or couldn't be played!",0
	   20 66 69 6C 65
	   20 6E 6F 74 20
	   66 6F 75 6E 64
	   20 6F 72 20 63
	   6F 75 6C 64 6E
	   27 74 20 62 65
	   20 70 6C 61 79
	   65 64 21 00
				    
 00000088 53 63 6F 72 65	    fileName  db "Scores.txt" 
	   73 2E 74 78 74
 00000092 45 6E 74 65 72		inputName db "Enter your name ... ",0
	   20 79 6F 75 72
	   20 6E 61 6D 65
	   20 2E 2E 2E 20
	   00
 000000A7  00000032 [		    username  db 50 dup(0)
	    00
	   ]



 000000D9 23 23 23 23 23	    pmtitle1 db "#################################################################################",0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00
 0000012B 23 20 20 20 20	    pmtitle2 db "#                                                                               #",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   23 00
 0000017D 23 20 20 20 20	    pmtitle3 db "#      %%%%%%%%  %%%%%%%  %%%%%%%%     %%%%%   %%%%%  %%%%%%%%   %%      %      #",0
	   20 20 25 25 25
	   25 25 25 25 25
	   20 20 25 25 25
	   25 25 25 25 20
	   20 25 25 25 25
	   25 25 25 25 20
	   20 20 20 20 25
	   25 25 25 25 20
	   20 20 25 25 25
	   25 25 20 20 25
	   25 25 25 25 25
	   25 25 20 20 20
	   25 25 20 20 20
	   20 20 20 25 20
	   20 20 20 20 20
	   23 00
 000001CF 23 20 20 20 20		pmtitle4 db "#      %%     %  %     %  %            %   %   %   %  %      %   % %     %      #",0
	   20 20 25 25 20
	   20 20 20 20 25
	   20 20 25 20 20
	   20 20 20 25 20
	   20 25 20 20 20
	   20 20 20 20 20
	   20 20 20 20 25
	   20 20 20 25 20
	   20 20 25 20 20
	   20 25 20 20 25
	   20 20 20 20 20
	   20 25 20 20 20
	   25 20 25 20 20
	   20 20 20 25 20
	   20 20 20 20 20
	   23 00
 00000221 23 20 20 20 20		pmtitle5 db "#      %%     %  %     %  %            %   %   %   %  %      %   %  %    %      #",0
	   20 20 25 25 20
	   20 20 20 20 25
	   20 20 25 20 20
	   20 20 20 25 20
	   20 25 20 20 20
	   20 20 20 20 20
	   20 20 20 20 25
	   20 20 20 25 20
	   20 20 25 20 20
	   20 25 20 20 25
	   20 20 20 20 20
	   20 25 20 20 20
	   25 20 20 25 20
	   20 20 20 25 20
	   20 20 20 20 20
	   23 00
 00000273 23 20 20 20 20		pmtitle6 db "#      %%%%%%%%  %%%%%%%  %       %%%  %   %%%%%   %  %%%%%%%%   %   %   %      #",0
	   20 20 25 25 25
	   25 25 25 25 25
	   20 20 25 25 25
	   25 25 25 25 20
	   20 25 20 20 20
	   20 20 20 20 25
	   25 25 20 20 25
	   20 20 20 25 25
	   25 25 25 20 20
	   20 25 20 20 25
	   25 25 25 25 25
	   25 25 20 20 20
	   25 20 20 20 25
	   20 20 20 25 20
	   20 20 20 20 20
	   23 00
 000002C5 23 20 20 20 20		pmtitle7 db "#      %%        %     %  %            %           %  %      %   %    %  %      #",0
	   20 20 25 25 20
	   20 20 20 20 20
	   20 20 25 20 20
	   20 20 20 25 20
	   20 25 20 20 20
	   20 20 20 20 20
	   20 20 20 20 25
	   20 20 20 20 20
	   20 20 20 20 20
	   20 25 20 20 25
	   20 20 20 20 20
	   20 25 20 20 20
	   25 20 20 20 20
	   25 20 20 25 20
	   20 20 20 20 20
	   23 00
 00000317 23 20 20 20 20		pmtitle8 db "#      %%        %     %  %            %           %  %      %   %     % %      #",0
	   20 20 25 25 20
	   20 20 20 20 20
	   20 20 25 20 20
	   20 20 20 25 20
	   20 25 20 20 20
	   20 20 20 20 20
	   20 20 20 20 25
	   20 20 20 20 20
	   20 20 20 20 20
	   20 25 20 20 25
	   20 20 20 20 20
	   20 25 20 20 20
	   25 20 20 20 20
	   20 25 20 25 20
	   20 20 20 20 20
	   23 00
 00000369 23 20 20 20 20		pmtitle9 db "#      %%        %     %  %%%%%%%%     %           %  %      %   %      %%      #",0
	   20 20 25 25 20
	   20 20 20 20 20
	   20 20 25 20 20
	   20 20 20 25 20
	   20 25 25 25 25
	   25 25 25 25 20
	   20 20 20 20 25
	   20 20 20 20 20
	   20 20 20 20 20
	   20 25 20 20 25
	   20 20 20 20 20
	   20 25 20 20 20
	   25 20 20 20 20
	   20 20 25 25 20
	   20 20 20 20 20
	   23 00
 000003BB 23 20 20 20 20		pmtitle10 db"#                                                                               #",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   23 00
 0000040D 23 23 23 23 23		pmtitle11 db"#################################################################################",0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 00

 0000045F 20 5F 5F 5F 20	    menutitle0 db " ___     ___ _________  ___     ___ ___   ___ ",0
	   20 20 20 20 5F
	   5F 5F 20 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   20 5F 5F 5F 20
	   20 20 5F 5F 5F
	   20 00
 0000048E 20 7C 20 20 5C	    menutitle1 db " |  \   /  | |  ______| |  \    | | | |   | | ",0
	   20 20 20 2F 20
	   20 7C 20 7C 20
	   20 5F 5F 5F 5F
	   5F 5F 7C 20 7C
	   20 20 5C 20 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 7C 20 7C
	   20 00
 000004BD 20 7C 20 7C 5C	    menutitle2 db " | |\\_//| | | |______  | |\\   | | | |   | |",0
	   5C 5F 2F 2F 7C
	   20 7C 20 7C 20
	   7C 5F 5F 5F 5F
	   5F 5F 20 20 7C
	   20 7C 5C 5C 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 7C 20 7C
	   00
 000004EB 20 7C 20 7C 20	    menutitle3 db " | | \_/ | | | _______| | | \\  | | | |   | | ",0
	   5C 5F 2F 20 7C
	   20 7C 20 7C 20
	   5F 5F 5F 5F 5F
	   5F 5F 7C 20 7C
	   20 7C 20 5C 5C
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 7C 20 7C
	   20 00
 0000051A 20 7C 20 7C 20	    menutitle4 db " | |     | | | |______  | |  \\ | | | |___| |",0
	   20 20 20 20 7C
	   20 7C 20 7C 20
	   7C 5F 5F 5F 5F
	   5F 5F 20 20 7C
	   20 7C 20 20 5C
	   5C 20 7C 20 7C
	   20 7C 20 7C 5F
	   5F 5F 7C 20 7C
	   00
 00000548 20 7C 5F 7C 20	    menutitle5 db " |_|     |_| |________| |_|   \\|_| |_______| ",0
	   20 20 20 20 7C
	   5F 7C 20 7C 5F
	   5F 5F 5F 5F 5F
	   5F 5F 7C 20 7C
	   5F 7C 20 20 20
	   5C 5C 7C 5F 7C
	   20 7C 5F 5F 5F
	   5F 5F 5F 5F 7C
	   20 00

 00000577 2D 2D 2D 2D 2D	    menuopt0 db "---------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 00
 00000599 7C 20 20 31 2E	    menuopt1 db "|  1. Start Game ( 3 levels)    |",0
	   20 53 74 61 72
	   74 20 47 61 6D
	   65 20 28 20 33
	   20 6C 65 76 65
	   6C 73 29 20 20
	   20 20 7C 00
 000005BB 7C 20 20 32 2E	    menuopt2 db "|  2. Display Game Instructions |",0
	   20 44 69 73 70
	   6C 61 79 20 47
	   61 6D 65 20 49
	   6E 73 74 72 75
	   63 74 69 6F 6E
	   73 20 7C 00
 000005DD 7C 20 20 33 2E	    menuopt3 db "|  3. View Highscores /scores   |",0
	   20 56 69 65 77
	   20 48 69 67 68
	   73 63 6F 72 65
	   73 20 2F 73 63
	   6F 72 65 73 20
	   20 20 7C 00
 000005FF 7C 20 20 34 2E	    menuopt4 db "|  4. Exit Game                 |",0
	   20 45 78 69 74
	   20 47 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 00
 00000621 7C 5F 5F 5F 5F	    menuopt5 db "|_______________________________|",0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 7C 00

 00000643 45 6E 74 65 72	    menuoptchoose db "Enter your choice:  ",0
	   20 79 6F 75 72
	   20 63 68 6F 69
	   63 65 3A 20 20
	   00

 00000658 2A 20 20 20 20	    level1opt0 db "*     ***** *       * *****  *          **    ",0
	   20 2A 2A 2A 2A
	   2A 20 2A 20 20
	   20 20 20 20 20
	   2A 20 2A 2A 2A
	   2A 2A 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 20 20 20
	   20 00
 00000687 2A 20 20 20 20	    level1opt1 db "*     *      *     *  *      *          **    ",0
	   20 2A 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 2A
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 20 20 20
	   20 00
 000006B6 2A 20 20 20 20	    level1opt2 db "*     *****   *   *   *****  *          **    ",0
	   20 2A 2A 2A 2A
	   2A 20 20 20 2A
	   20 20 20 2A 20
	   20 20 2A 2A 2A
	   2A 2A 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 20 20 20
	   20 00
 000006E5 2A 20 20 20 20	    level1opt3 db "*     *        * *    *      *          **    ",0
	   20 2A 20 20 20
	   20 20 20 20 20
	   2A 20 2A 20 20
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 20 20 20
	   20 00
 00000714 2A 2A 2A 2A 2A	    level1opt4 db "***** *****     *     *****  *****      **    ",0
	   20 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2A 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 20 20 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   2A 2A 20 20 20
	   20 00

 00000743 2A 20 20 20 20	    level2opt0 db "*     ***** *       * *****  *         *****  ",0
	   20 2A 2A 2A 2A
	   2A 20 2A 20 20
	   20 20 20 20 20
	   2A 20 2A 2A 2A
	   2A 2A 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 20
	   20 00
 00000772 2A 20 20 20 20	    level2opt1 db "*     *      *     *  *      *             *  ",0
	   20 2A 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 2A
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 00
 000007A1 2A 20 20 20 20	    level2opt2 db "*     *****   *   *   *****  *         *****  ",0
	   20 2A 2A 2A 2A
	   2A 20 20 20 2A
	   20 20 20 2A 20
	   20 20 2A 2A 2A
	   2A 2A 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 20
	   20 00
 000007D0 2A 20 20 20 20	    level2opt3 db "*     *        * *    *      *         *      ",0
	   20 2A 20 20 20
	   20 20 20 20 20
	   2A 20 2A 20 20
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 00
 000007FF 2A 2A 2A 2A 2A	    level2opt4 db "***** *****     *     *****  *****     *****  ",0
	   20 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2A 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 20 20 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 20
	   20 00

 0000082E 2A 20 20 20 20	    level3opt0 db "*     ***** *       * *****  *         *****  ",0
	   20 2A 2A 2A 2A
	   2A 20 2A 20 20
	   20 20 20 20 20
	   2A 20 2A 2A 2A
	   2A 2A 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 20
	   20 00
 0000085D 2A 20 20 20 20	    level3opt1 db "*     *      *     *  *      *             *  ",0
	   20 2A 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 2A
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 00
 0000088C 2A 20 20 20 20	    level3opt2 db "*     *****   *   *   *****  *         *****  ",0
	   20 2A 2A 2A 2A
	   2A 20 20 20 2A
	   20 20 20 2A 20
	   20 20 2A 2A 2A
	   2A 2A 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 20
	   20 00
 000008BB 2A 20 20 20 20	    level3opt3 db "*     *        * *    *      *             *  ",0
	   20 2A 20 20 20
	   20 20 20 20 20
	   2A 20 2A 20 20
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 00
 000008EA 2A 2A 2A 2A 2A	    level3opt4 db "***** *****     *     *****  *****     *****  ",0
	   20 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2A 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 20 20 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 20
	   20 00

 00000919 20 45 6E 74 65	    leveloptchoose1 db " Enter you choice (1: Level 1, 2: Level 2 , 3: Level 3) ",0
	   72 20 79 6F 75
	   20 63 68 6F 69
	   63 65 20 28 31
	   3A 20 4C 65 76
	   65 6C 20 31 2C
	   20 32 3A 20 4C
	   65 76 65 6C 20
	   32 20 2C 20 33
	   3A 20 4C 65 76
	   65 6C 20 33 29
	   20 00
 00000952 20 52 65 74 75	    leveloptchoose2 db " Return to Main Menu (press 4), Exit Game (press 5) ",0
	   72 6E 20 74 6F
	   20 4D 61 69 6E
	   20 4D 65 6E 75
	   20 28 70 72 65
	   73 73 20 34 29
	   2C 20 45 78 69
	   74 20 47 61 6D
	   65 20 28 70 72
	   65 73 73 20 35
	   29 20 00


 00000987 20 20 20 20 20	    instruc1 db "                          INSTRUCTIONS                             ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 49 4E 53 54
	   52 55 43 54 49
	   4F 4E 53 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 00
 000009CB 5F 5F 5F 5F 5F	    instruc2 db "_______________________________________________________________________",0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 00
 00000A13 2D 2D 2D 2D 2D	    instruc3 db "-----------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 00
 00000A5B 20 31 2E 20 54	    instruc4 db " 1. To earn points eat the pellets.",0
	   6F 20 65 61 72
	   6E 20 70 6F 69
	   6E 74 73 20 65
	   61 74 20 74 68
	   65 20 70 65 6C
	   6C 65 74 73 2E
	   00
 00000A7F 20 32 2E 20 45	    instruc5 db " 2. Each pellet is worth one point.",0
	   61 63 68 20 70
	   65 6C 6C 65 74
	   20 69 73 20 77
	   6F 72 74 68 20
	   6F 6E 65 20 70
	   6F 69 6E 74 2E
	   00
 00000AA3 20 33 20 20 53	    instruc6 db " 3  Stay away from the ghosts, if one catches you, You lose a life.",0
	   74 61 79 20 61
	   77 61 79 20 66
	   72 6F 6D 20 74
	   68 65 20 67 68
	   6F 73 74 73 2C
	   20 69 66 20 6F
	   6E 65 20 63 61
	   74 63 68 65 73
	   20 79 6F 75 2C
	   20 59 6F 75 20
	   6C 6F 73 65 20
	   61 20 6C 69 66
	   65 2E 00
 00000AE7 20 34 2E 20 55	    instruc7 db " 4. Use W,A,S,D keys move up,down,left and right respectively.",0
	   73 65 20 57 2C
	   41 2C 53 2C 44
	   20 6B 65 79 73
	   20 6D 6F 76 65
	   20 75 70 2C 64
	   6F 77 6E 2C 6C
	   65 66 74 20 61
	   6E 64 20 72 69
	   67 68 74 20 72
	   65 73 70 65 63
	   74 69 76 65 6C
	   79 2E 00
 00000B26 5F 5F 5F 5F 5F	    instruc8 db "________________________________________________________________________",0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 00
 00000B6F 2D 2D 2D 2D 2D	    instruc9 db "------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00

 00000BB8 50 72 65 73 73	    instrucChoose db "Press 1 to return to menu, Press 2 to Exit Game: ",0
	   20 31 20 74 6F
	   20 72 65 74 75
	   72 6E 20 74 6F
	   20 6D 65 6E 75
	   2C 20 50 72 65
	   73 73 20 32 20
	   74 6F 20 45 78
	   69 74 20 47 61
	   6D 65 3A 20 00

 00000BEA 20 20 20 20 20	    hsTitle0 db "        ______        _____  _____ ______ _____ _____ _____  ",0
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 5F 20 5F
	   5F 5F 5F 5F 20
	   20 00
 00000C28 7C 20 20 20 7C	    hsTitle1 db "|   | | |      |   |  |      |     |    | |   | |     |      ",0
	   20 7C 20 7C 20
	   20 20 20 20 20
	   7C 20 20 20 7C
	   20 20 7C 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   7C 20 20 20 20
	   7C 20 7C 20 20
	   20 7C 20 7C 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 00
 00000C66 7C 5F 5F 5F 7C	    hsTitle2 db "|___| | |  ___ |___|  |____  |     |    | |___| |____ |____  ",0
	   20 7C 20 7C 20
	   20 5F 5F 5F 20
	   7C 5F 5F 5F 7C
	   20 20 7C 5F 5F
	   5F 5F 20 20 7C
	   20 20 20 20 20
	   7C 20 20 20 20
	   7C 20 7C 5F 5F
	   5F 7C 20 7C 5F
	   5F 5F 5F 20 7C
	   5F 5F 5F 5F 20
	   20 00
 00000CA4 7C 20 20 20 7C	    hsTitle3 db "|   | | |    | |   |       | |     |    | | \   |          | ",0
	   20 7C 20 7C 20
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 20 20 20 20
	   7C 20 20 20 20
	   7C 20 7C 20 5C
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 00
 00000CE2 7C 20 20 20 7C	    hsTitle4 db "|   | | |____| |   |  _____| |____ |____| |  \  |____  ____| ",0
	   20 7C 20 7C 5F
	   5F 5F 5F 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 5F
	   5F 5F 7C 20 7C
	   5F 5F 5F 5F 20
	   7C 5F 5F 5F 5F
	   7C 20 7C 20 20
	   5C 20 20 7C 5F
	   5F 5F 5F 20 20
	   5F 5F 5F 5F 7C
	   20 00

 00000D20 2E 2E 2E 47 41	    gamePause1 db "...GAME PAUSED...",0
	   4D 45 20 50 41
	   55 53 45 44 2E
	   2E 2E 00
 00000D32 50 72 65 73 73	    gamePause2 db "Press 1: Resume Game",0
	   20 31 3A 20 52
	   65 73 75 6D 65
	   20 47 61 6D 65
	   00
 00000D47 50 72 65 73 73	    gamePause3 db "Press 2: Go to Menu",0
	   20 32 3A 20 47
	   6F 20 74 6F 20
	   4D 65 6E 75 00
 00000D5B 50 72 65 73 73	    gamePause4 db "Press 3: Exit Game",0
	   20 33 3A 20 45
	   78 69 74 20 47
	   61 6D 65 00


				    ;yeh colors hain 
 = 00000004			    redTxt = red+(black*16);
 = 0000000E			    yellowTxt =yellow+(black*16);
 = 00000002			    greenTxt =green+ (black*16);
 = 00000001			    blueTxt =blue+ (black*16);
 = 0000000F			    whiteTxt =white+ (black *16);

 00000D6E 00			    userChoice db ?
 00000D6F 00			    temp db ?
 00000D70 00			    currentLevel db ?
				;-----------------------------------------
				;level 1 vars for drawing
 00000D71 00000000		    score dd 0
 00000D75 00000000		    highScore dd 0
 00000D79 03			    lives db 3
 00000D7A  00000014 [		    playerName db 20 dup(' ')   ; From your welcome screen
	    20
	   ]
				    
 00000D8E 4C 45 56 45 4C	    levelText db "LEVEL 1",0
	   20 31 00
 00000D96 53 43 4F 52 45	    scoreText db "SCORE: ",0
	   3A 20 00
 00000D9E 48 49 47 48 53	    highScoreText db "HIGHSCORE: ",0
	   43 4F 52 45 3A
	   20 00
 00000DAA 4C 49 56 45 53	    livesText db "LIVES: ",0
	   3A 20 00
 00000DB2 50 4C 41 59 45	    playerText db "PLAYER: ",0
	   52 3A 20 00
				    
 00000DBB 23			    wallChar db '#'

				;------------------------------------------
				;level 1 logic vars
				    ; Player position
 00000DBC 28			    pacmanX db 40
 00000DBD 0C			    pacmanY db 12
				    
				    ; Ghosts positions
 00000DBE 14			    ghost1X db 20
 00000DBF 0A			    ghost1Y db 10

				    
				    ; Ghost directions (1=right, 2=left, 3=up, 4=down)
 00000DC0 01			    ghost1Dir db 1
 00000DC1 02			    ghost2Dir db 2
				    
				    ; Pellets array (0 = eaten, 1 = exists)
 00000DC2  000007D0 [		    pellets db GAME_WIDTH * 25 dup(0)
	    00
	   ]
				    
				    ; Wall positions (x,y,width,height)
 00001592 0A 05 0F 01 1E	    walls db 10,5,15,1,   ; Horizontal wall
	   08 01 0A 32 0F
	   0A 01 14 14 05
	   01 28 0A 01 05
				          30,8,1,10,     ; Vertical wall
				          50,15,10,1,    ; Horizontal wall
				          20,20,5,1,     ; Horizontal wall
				          40,10,1,5      ; Vertical wall
 000015A6 05			    wallCount db 5
				    
				    ; Movement keys
 000015A7 57			    moveUp db 'W'
 000015A8 41			    moveLeft db 'A'
 000015A9 53			    moveDown db 'S'
 000015AA 44			    moveRight db 'D'
 000015AB 51			    exitKey db 'Q'        ; ESC key
				    


 00000000			.code
 00000000			main proc
 00000000  E8 00000000 E	    call Clrscr
 00000005  E8 00000054		    call WelcomeScreen
 0000000A  E8 00000188		    call MenuScreen
				    
				    exit
 0000000F  6A 00	   *	    push   +000000000h
 00000011  E8 00000000 E   *	    call   ExitProcess
 00000016			main endp

				;-----------------------------------------------------
 00000016			introSound PROC
 00000016  50			    push eax
 00000017  52			    push edx

				    INVOKE PlaySound, OFFSET PacmanIntro, NULL, SND_FILENAME OR SND_ASYNC
 00000018  68 00020001	   *	    push   +000020001h
 0000001D  6A 00	   *	    push   +000000000h
 0000001F  68 00000028 R   *	    push   dword  ptr OFFSET FLAT: PacmanIntro
 00000024  E8 00000000 E   *	    call   PlaySound
				    
 00000029  85 C0		    test eax, eax
 0000002B  75 0A		    jnz no_error1
 0000002D  BA 0000005C R	    mov edx, OFFSET SoundError
 00000032  E8 00000000 E	    call WriteString
 00000037			no_error1:
 00000037  5A			    pop edx
 00000038  58			    pop eax
 00000039  C3			    ret
 0000003A			introSound ENDP

				;-----------------------------------------------------
 0000003A			levelSound PROC
 0000003A  50			    push eax
 0000003B  52			    push edx
				    INVOKE PlaySound, OFFSET midSound, NULL, SND_FILENAME OR SND_ASYNC
 0000003C  68 00020001	   *	    push   +000020001h
 00000041  6A 00	   *	    push   +000000000h
 00000043  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: midSound
 00000048  E8 00000000 E   *	    call   PlaySound
 0000004D  85 C0		    test eax, eax
 0000004F  75 0A		    jnz no_error2
 00000051  BA 0000005C R	    mov edx, OFFSET SoundError
 00000056  E8 00000000 E	    call WriteString
 0000005B			no_error2:
 0000005B  5A			    pop edx
 0000005C  58			    pop eax
 0000005D  C3			    ret
 0000005E			levelSound ENDP

				;-----------------------------------------------------
 0000005E			WelcomeScreen proc

 0000005E  E8 FFFFFFB3		    call introSound

				    ; Red Color
 00000063  B8 00000004		    mov eax, redTxt
 00000068  E8 00000000 E	    call SetTextColor

 0000006D  B6 05		    mov dh,5
 0000006F  B2 0C		    mov dl,12
 00000071  E8 00000000 E	    call Gotoxy
 00000076  BA 000000D9 R	    mov edx, offset pmtitle1
 0000007B  E8 00000000 E	    call WriteString

 00000080  B6 06		    mov dh, 6
 00000082  B2 0C		    mov dl, 12
 00000084  E8 00000000 E	    call Gotoxy
 00000089  BA 0000012B R	    mov edx, offset pmtitle2
 0000008E  E8 00000000 E	    call WriteString

 00000093  B6 07		    mov dh, 7
 00000095  B2 0C		    mov dl, 12
 00000097  E8 00000000 E	    call Gotoxy
 0000009C  BA 0000017D R	    mov edx, offset pmtitle3
 000000A1  E8 00000000 E	    call WriteString

				    ; Blue Color
 000000A6  B8 00000001		    mov eax, blueTxt
 000000AB  E8 00000000 E	    call SetTextColor

 000000B0  B6 08		    mov dh, 8
 000000B2  B2 0C		    mov dl, 12
 000000B4  E8 00000000 E	    call Gotoxy
 000000B9  BA 000001CF R	    mov edx, offset pmtitle4
 000000BE  E8 00000000 E	    call WriteString

 000000C3  B6 09		    mov dh, 9
 000000C5  B2 0C		    mov dl, 12
 000000C7  E8 00000000 E	    call Gotoxy
 000000CC  BA 00000221 R	    mov edx, offset pmtitle5
 000000D1  E8 00000000 E	    call WriteString

 000000D6  B6 0A		    mov dh, 10
 000000D8  B2 0C		    mov dl, 12
 000000DA  E8 00000000 E	    call Gotoxy
 000000DF  BA 00000273 R	    mov edx, offset pmtitle6
 000000E4  E8 00000000 E	    call WriteString

 000000E9  B6 0B		    mov dh, 11
 000000EB  B2 0C		    mov dl, 12
 000000ED  E8 00000000 E	    call Gotoxy
 000000F2  BA 000002C5 R	    mov edx, offset pmtitle7
 000000F7  E8 00000000 E	    call WriteString

				    ; Green Color 
 000000FC  B8 00000002		    mov eax, greenTxt
 00000101  E8 00000000 E	    call SetTextColor

 00000106  B6 0C		    mov dh, 12
 00000108  B2 0C		    mov dl, 12
 0000010A  E8 00000000 E	    call Gotoxy
 0000010F  BA 00000317 R	    mov edx, offset pmtitle8
 00000114  E8 00000000 E	    call WriteString

 00000119  B6 0D		    mov dh,13
 0000011B  B2 0C		    mov dl,12
 0000011D  E8 00000000 E	    call Gotoxy
 00000122  BA 00000369 R	    mov edx, offset pmtitle9
 00000127  E8 00000000 E	    call WriteString

 0000012C  B6 0E		    mov dh, 14
 0000012E  B2 0C		    mov dl, 12
 00000130  E8 00000000 E	    call Gotoxy
 00000135  BA 000003BB R	    mov edx, offset pmtitle10
 0000013A  E8 00000000 E	    call WriteString

 0000013F  B6 0F		    mov dh, 15
 00000141  B2 0C		    mov dl, 12
 00000143  E8 00000000 E	    call Gotoxy
 00000148  BA 0000040D R	    mov edx, offset pmtitle11
 0000014D  E8 00000000 E	    call WriteString

				    
 00000152  B8 0000000E		    mov eax, yellowTxt
 00000157  E8 00000000 E	    call SetTextColor

 0000015C  B6 13		    mov dh, 19
 0000015E  B2 0C		    mov dl, 12
 00000160  E8 00000000 E	    call Gotoxy
 00000165  BA 00000092 R	    mov edx, offset inputName
 0000016A  E8 00000000 E	    call WriteString

				    ; asking for user input
 0000016F  BA 000000A7 R	    mov edx, offset userName
 00000174  B9 00000032		    mov ecx, lengthof userName
 00000179  E8 00000000 E	    call ReadString

 0000017E  B6 16		    mov dh, 22
 00000180  B2 0B		    mov dl,11
 00000182  E8 00000000 E	    call Gotoxy
 00000187  BA 00000D6F R	    mov edx, offset temp
 0000018C  E8 00000000 E	    call WaitMsg
 00000191  E8 00000000 E	    call Clrscr
 00000196  C3			    ret
 00000197			WelcomeScreen endp


				;-----------------------------------------------------
 00000197			MenuScreen proc

 00000197  E8 FFFFFE7A		    call introSound

 0000019C  E8 00000000 E	    call Clrscr
				    
 000001A1  B8 00000001		    mov eax, blueTxt
 000001A6  E8 00000000 E	    call SetTextColor
				    
 000001AB  B6 05		    mov dh, 5
 000001AD  B2 1E		    mov dl, 30
 000001AF  E8 00000000 E	    call Gotoxy
 000001B4  BA 0000045F R	    mov edx, offset menutitle0
 000001B9  E8 00000000 E	    call WriteString
				    
 000001BE  B6 06		    mov dh, 6
 000001C0  B2 1E		    mov dl, 30
 000001C2  E8 00000000 E	    call Gotoxy
 000001C7  BA 0000048E R	    mov edx, offset menutitle1
 000001CC  E8 00000000 E	    call WriteString
				    
 000001D1  B6 07		    mov dh, 7
 000001D3  B2 1E		    mov dl, 30
 000001D5  E8 00000000 E	    call Gotoxy
 000001DA  BA 000004BD R	    mov edx, offset menutitle2
 000001DF  E8 00000000 E	    call WriteString
				    
 000001E4  B6 08		    mov dh, 8
 000001E6  B2 1E		    mov dl, 30
 000001E8  E8 00000000 E	    call Gotoxy
 000001ED  BA 000004EB R	    mov edx, offset menutitle3
 000001F2  E8 00000000 E	    call WriteString
				    
 000001F7  B6 09		    mov dh, 9
 000001F9  B2 1E		    mov dl, 30
 000001FB  E8 00000000 E	    call Gotoxy
 00000200  BA 0000051A R	    mov edx, offset menutitle4
 00000205  E8 00000000 E	    call WriteString
				    
 0000020A  B6 0A		    mov dh, 10
 0000020C  B2 1E		    mov dl, 30
 0000020E  E8 00000000 E	    call Gotoxy
 00000213  BA 00000548 R	    mov edx, offset menutitle5
 00000218  E8 00000000 E	    call WriteString
				    
				    ;menu options in green
 0000021D  B8 00000002		    mov eax, greenTxt
 00000222  E8 00000000 E	    call SetTextColor
				    
 00000227  B6 0D		    mov dh, 13
 00000229  B2 23		    mov dl, 35
 0000022B  E8 00000000 E	    call Gotoxy
 00000230  BA 00000577 R	    mov edx, offset menuopt0
 00000235  E8 00000000 E	    call WriteString
				    
 0000023A  B6 0E		    mov dh, 14
 0000023C  B2 23		    mov dl, 35
 0000023E  E8 00000000 E	    call Gotoxy
 00000243  BA 00000599 R	    mov edx, offset menuopt1
 00000248  E8 00000000 E	    call WriteString
				    
 0000024D  B6 0F		    mov dh, 15
 0000024F  B2 23		    mov dl, 35
 00000251  E8 00000000 E	    call Gotoxy
 00000256  BA 000005BB R	    mov edx, offset menuopt2
 0000025B  E8 00000000 E	    call WriteString
				    
 00000260  B6 10		    mov dh, 16
 00000262  B2 23		    mov dl, 35
 00000264  E8 00000000 E	    call Gotoxy
 00000269  BA 000005DD R	    mov edx, offset menuopt3
 0000026E  E8 00000000 E	    call WriteString
				    
 00000273  B6 11		    mov dh, 17
 00000275  B2 23		    mov dl, 35
 00000277  E8 00000000 E	    call Gotoxy
 0000027C  BA 000005FF R	    mov edx, offset menuopt4
 00000281  E8 00000000 E	    call WriteString
				    
 00000286  B6 12		    mov dh, 18
 00000288  B2 23		    mov dl, 35
 0000028A  E8 00000000 E	    call Gotoxy
 0000028F  BA 00000621 R	    mov edx, offset menuopt5
 00000294  E8 00000000 E	    call WriteString
				    
				    ; user choice
 00000299  B8 0000000F		    mov eax, whiteTxt
 0000029E  E8 00000000 E	    call SetTextColor
				    
 000002A3  B6 14		    mov dh, 20
 000002A5  B2 23		    mov dl, 35
 000002A7  E8 00000000 E	    call Gotoxy
 000002AC  BA 00000643 R	    mov edx, offset menuoptchoose
 000002B1  E8 00000000 E	    call WriteString
				    
 000002B6  E8 00000000 E	    call ReadInt
 000002BB  A2 00000D6E R	    mov userChoice, al
				    
				  
 000002C0  80 3D 00000D6E R	    cmp userChoice, 1
	   01
 000002C7  74 20		    je LevelSelection
 000002C9  80 3D 00000D6E R	    cmp userChoice, 2
	   02
 000002D0  74 21		    je ShowInstructions
 000002D2  80 3D 00000D6E R	    cmp userChoice, 3
	   03
 000002D9  74 22		    je ShowHighscores
 000002DB  80 3D 00000D6E R	    cmp userChoice, 4
	   04
 000002E2  74 23		    je ExitGame
				    
				    ;if user ghalat option then go to menu (already udhr he)
 000002E4  E9 FFFFFEAE		    jmp MenuScreen
				    
 000002E9			LevelSelection:
 000002E9  E8 00000025		    call LevelSelectScreen
 000002EE  E9 FFFFFEA4		    jmp MenuScreen
				    
 000002F3			ShowInstructions:
 000002F3  E8 000001DE		    call InstructionsScreen
 000002F8  E9 FFFFFE9A		    jmp MenuScreen
				    
 000002FD			ShowHighscores:
 000002FD  E8 000002AE		    call HighscoresScreen
 00000302  E9 FFFFFE90		    jmp MenuScreen
				    
 00000307			ExitGame:
 00000307  E8 00000000 E	    call Clrscr
				    exit
 0000030C  6A 00	   *	    push   +000000000h
 0000030E  E8 00000000 E   *	    call   ExitProcess
 00000313			MenuScreen endp

				;-----------------------------------------------------
 00000313			LevelSelectScreen proc

 00000313  E8 FFFFFCFE		    call introSound

 00000318  E8 00000000 E	    call Clrscr
				    
				    ; Display level selection title
 0000031D  B8 00000001		    mov eax, blueTxt
 00000322  E8 00000000 E	    call SetTextColor
				    
				    
				    ; level options
 00000327  B8 00000004		    mov eax, redTxt
 0000032C  E8 00000000 E	    call SetTextColor
				    
				    ; Level 1
 00000331  B6 03		    mov dh, 3
 00000333  B2 1E		    mov dl, 30
 00000335  E8 00000000 E	    call Gotoxy
 0000033A  BA 00000658 R	    mov edx, offset level1opt0
 0000033F  E8 00000000 E	    call WriteString
				    
 00000344  B6 04		    mov dh, 4
 00000346  B2 1E		    mov dl, 30
 00000348  E8 00000000 E	    call Gotoxy
 0000034D  BA 00000687 R	    mov edx, offset level1opt1
 00000352  E8 00000000 E	    call WriteString
				    
 00000357  B6 05		    mov dh, 5
 00000359  B2 1E		    mov dl, 30
 0000035B  E8 00000000 E	    call Gotoxy
 00000360  BA 000006B6 R	    mov edx, offset level1opt2
 00000365  E8 00000000 E	    call WriteString
				    
 0000036A  B6 06		    mov dh, 6
 0000036C  B2 1E		    mov dl, 30
 0000036E  E8 00000000 E	    call Gotoxy
 00000373  BA 000006E5 R	    mov edx, offset level1opt3
 00000378  E8 00000000 E	    call WriteString
				    
 0000037D  B6 07		    mov dh, 7
 0000037F  B2 1E		    mov dl, 30
 00000381  E8 00000000 E	    call Gotoxy
 00000386  BA 00000714 R	    mov edx, offset level1opt4
 0000038B  E8 00000000 E	    call WriteString
				    
				    ; Level 2
 00000390  B6 0A		    mov dh, 10
 00000392  B2 1E		    mov dl, 30
 00000394  E8 00000000 E	    call Gotoxy
 00000399  BA 00000743 R	    mov edx, offset level2opt0
 0000039E  E8 00000000 E	    call WriteString
				    
 000003A3  B6 0B		    mov dh, 11
 000003A5  B2 1E		    mov dl, 30
 000003A7  E8 00000000 E	    call Gotoxy
 000003AC  BA 00000772 R	    mov edx, offset level2opt1
 000003B1  E8 00000000 E	    call WriteString
				    
 000003B6  B6 0C		    mov dh, 12
 000003B8  B2 1E		    mov dl, 30
 000003BA  E8 00000000 E	    call Gotoxy
 000003BF  BA 000007A1 R	    mov edx, offset level2opt2
 000003C4  E8 00000000 E	    call WriteString
				    
 000003C9  B6 0D		    mov dh, 13
 000003CB  B2 1E		    mov dl, 30
 000003CD  E8 00000000 E	    call Gotoxy
 000003D2  BA 000007D0 R	    mov edx, offset level2opt3
 000003D7  E8 00000000 E	    call WriteString
				    
 000003DC  B6 0E		    mov dh, 14
 000003DE  B2 1E		    mov dl, 30
 000003E0  E8 00000000 E	    call Gotoxy
 000003E5  BA 000007FF R	    mov edx, offset level2opt4
 000003EA  E8 00000000 E	    call WriteString
				    
				    ; Level 3
 000003EF  B6 11		    mov dh, 17
 000003F1  B2 1E		    mov dl, 30
 000003F3  E8 00000000 E	    call Gotoxy
 000003F8  BA 0000082E R	    mov edx, offset level3opt0
 000003FD  E8 00000000 E	    call WriteString
				    
 00000402  B6 12		    mov dh, 18
 00000404  B2 1E		    mov dl, 30
 00000406  E8 00000000 E	    call Gotoxy
 0000040B  BA 0000085D R	    mov edx, offset level3opt1
 00000410  E8 00000000 E	    call WriteString
				    
 00000415  B6 13		    mov dh, 19
 00000417  B2 1E		    mov dl, 30
 00000419  E8 00000000 E	    call Gotoxy
 0000041E  BA 0000088C R	    mov edx, offset level3opt2
 00000423  E8 00000000 E	    call WriteString
				    
 00000428  B6 14		    mov dh, 20
 0000042A  B2 1E		    mov dl, 30
 0000042C  E8 00000000 E	    call Gotoxy
 00000431  BA 000008BB R	    mov edx, offset level3opt3
 00000436  E8 00000000 E	    call WriteString
				    
 0000043B  B6 15		    mov dh, 21
 0000043D  B2 1E		    mov dl, 30
 0000043F  E8 00000000 E	    call Gotoxy
 00000444  BA 000008EA R	    mov edx, offset level3opt4
 00000449  E8 00000000 E	    call WriteString
				    
				    ;user choice
 0000044E  B8 0000000F		    mov eax, whiteTxt
 00000453  E8 00000000 E	    call SetTextColor
				    
 00000458  B6 17		    mov dh, 23
 0000045A  B2 14		    mov dl, 20
 0000045C  E8 00000000 E	    call Gotoxy
 00000461  BA 00000919 R	    mov edx, offset leveloptchoose1
 00000466  E8 00000000 E	    call WriteString
				    
 0000046B  B6 18		    mov dh, 24
 0000046D  B2 14		    mov dl, 20
 0000046F  E8 00000000 E	    call Gotoxy
 00000474  BA 00000952 R	    mov edx, offset leveloptchoose2
 00000479  E8 00000000 E	    call WriteString
				    
 0000047E  B6 19		    mov dh, 25
 00000480  B2 14		    mov dl, 20
 00000482  E8 00000000 E	    call Gotoxy
 00000487  E8 00000000 E	    call ReadInt
				    
				    ; Processing choice made
 0000048C  3C 01		    cmp al, 1
 0000048E  74 15		    je StartLevel1
 00000490  3C 02		    cmp al, 2
 00000492  74 1D		    je StartLevel2
 00000494  3C 03		    cmp al, 3
 00000496  74 25		    je StartLevel3
 00000498  3C 04		    cmp al, 4
 0000049A  74 2D		    je ReturnToMenu
 0000049C  3C 05		    cmp al, 5
 0000049E  74 2A		    je ExitGame
				    
				    ; Invalid choice - show menu again
 000004A0  E9 FFFFFE6E		    jmp LevelSelectScreen

 000004A5			StartLevel1:
 000004A5  C6 05 00000D70 R	    mov currentLevel, 1
	   01
 000004AC  E8 00000195		    call Level1Screen
				    ;jmp ReturnToMenu

 000004B1			StartLevel2:
 000004B1  C6 05 00000D70 R	    mov currentLevel, 2
	   02
 000004B8  E8 000007C5		    call Level2Screen  

 000004BD			StartLevel3:
 000004BD  C6 05 00000D70 R	    mov currentLevel, 3
	   03
 000004C4  E8 000007B9		    call Level3Screen  
				    
 000004C9			ReturnToMenu:
 000004C9  C3			    ret
				    
 000004CA			ExitGame:
 000004CA  E8 00000000 E	    call Clrscr
				    exit
 000004CF  6A 00	   *	    push   +000000000h
 000004D1  E8 00000000 E   *	    call   ExitProcess
 000004D6			LevelSelectScreen endp

				;-----------------------------------------------------
 000004D6			InstructionsScreen proc

 000004D6  E8 FFFFFB3B		    call introSound

 000004DB  E8 00000000 E	    call Clrscr
				    
				    ; Display instructions title
 000004E0  B8 00000001		    mov eax, blueTxt
 000004E5  E8 00000000 E	    call SetTextColor
				    
 000004EA  B6 05		    mov dh, 5
 000004EC  B2 0F		    mov dl, 15
 000004EE  E8 00000000 E	    call Gotoxy
 000004F3  BA 00000987 R	    mov edx, offset instruc1
 000004F8  E8 00000000 E	    call WriteString
				    
 000004FD  B6 06		    mov dh, 6
 000004FF  B2 0F		    mov dl, 15
 00000501  E8 00000000 E	    call Gotoxy
 00000506  BA 000009CB R	    mov edx, offset instruc2
 0000050B  E8 00000000 E	    call WriteString
				    
				    ; Display instructions text
 00000510  B8 00000002		    mov eax, greenTxt
 00000515  E8 00000000 E	    call SetTextColor
				    
 0000051A  B6 08		    mov dh, 8
 0000051C  B2 0F		    mov dl, 15
 0000051E  E8 00000000 E	    call Gotoxy
 00000523  BA 00000A5B R	    mov edx, offset instruc4
 00000528  E8 00000000 E	    call WriteString
				    
 0000052D  B6 09		    mov dh, 9
 0000052F  B2 0F		    mov dl, 15
 00000531  E8 00000000 E	    call Gotoxy
 00000536  BA 00000A7F R	    mov edx, offset instruc5
 0000053B  E8 00000000 E	    call WriteString
				    
 00000540  B6 0A		    mov dh, 10
 00000542  B2 0F		    mov dl, 15
 00000544  E8 00000000 E	    call Gotoxy
 00000549  BA 00000AA3 R	    mov edx, offset instruc6
 0000054E  E8 00000000 E	    call WriteString
				    
 00000553  B6 0B		    mov dh, 11
 00000555  B2 0F		    mov dl, 15
 00000557  E8 00000000 E	    call Gotoxy
 0000055C  BA 00000AE7 R	    mov edx, offset instruc7
 00000561  E8 00000000 E	    call WriteString
				    
 00000566  B6 0C		    mov dh, 12
 00000568  B2 0F		    mov dl, 15
 0000056A  E8 00000000 E	    call Gotoxy
 0000056F  BA 00000B26 R	    mov edx, offset instruc8
 00000574  E8 00000000 E	    call WriteString
				    
				    ; Get user choice
 00000579  B8 0000000F		    mov eax, whiteTxt
 0000057E  E8 00000000 E	    call SetTextColor
				    
 00000583  B6 0E		    mov dh, 14
 00000585  B2 0F		    mov dl, 15
 00000587  E8 00000000 E	    call Gotoxy
 0000058C  BA 00000BB8 R	    mov edx, offset instrucChoose
 00000591  E8 00000000 E	    call WriteString
				    
 00000596  E8 00000000 E	    call ReadInt
				    
				    ; Process choice
 0000059B  3C 01		    cmp al, 1
 0000059D  74 04		    je ReturnToMenu
 0000059F  3C 02		    cmp al, 2
 000005A1  74 01		    je ExitGame
				    
 000005A3			ReturnToMenu:
 000005A3  C3			    ret
				    
 000005A4			ExitGame:
 000005A4  E8 00000000 E	    call Clrscr
				    exit
 000005A9  6A 00	   *	    push   +000000000h
 000005AB  E8 00000000 E   *	    call   ExitProcess
 000005B0			InstructionsScreen endp

				;-----------------------------------------------------
 000005B0			HighscoresScreen proc


 000005B0  E8 FFFFFA61		    call introSound

 000005B5  E8 00000000 E	    call Clrscr
				    

 000005BA  B8 0000000E		    mov eax, yellowTxt
 000005BF  E8 00000000 E	    call SetTextColor
				    
 000005C4  B6 05		    mov dh, 5
 000005C6  B2 14		    mov dl, 20
 000005C8  E8 00000000 E	    call Gotoxy
 000005CD  BA 00000BEA R	    mov edx, offset hsTitle0
 000005D2  E8 00000000 E	    call WriteString
				    
 000005D7  B6 06		    mov dh, 6
 000005D9  B2 14		    mov dl, 20
 000005DB  E8 00000000 E	    call Gotoxy
 000005E0  BA 00000C28 R	    mov edx, offset hsTitle1
 000005E5  E8 00000000 E	    call WriteString
				    
 000005EA  B6 07		    mov dh, 7
 000005EC  B2 14		    mov dl, 20
 000005EE  E8 00000000 E	    call Gotoxy
 000005F3  BA 00000C66 R	    mov edx, offset hsTitle2
 000005F8  E8 00000000 E	    call WriteString
				    
 000005FD  B6 08		    mov dh, 8
 000005FF  B2 14		    mov dl, 20
 00000601  E8 00000000 E	    call Gotoxy
 00000606  BA 00000CA4 R	    mov edx, offset hsTitle3
 0000060B  E8 00000000 E	    call WriteString
				    
 00000610  B6 09		    mov dh, 9
 00000612  B2 14		    mov dl, 20
 00000614  E8 00000000 E	    call Gotoxy
 00000619  BA 00000CE2 R	    mov edx, offset hsTitle4
 0000061E  E8 00000000 E	    call WriteString
				    
				    ; Here you would normally display the actual high scores
				    ; For now, just display a message
 00000623  B8 0000000F		    mov eax, whiteTxt
 00000628  E8 00000000 E	    call SetTextColor
				    
 0000062D  B6 0C		    mov dh, 12
 0000062F  B2 1E		    mov dl, 30
 00000631  E8 00000000 E	    call Gotoxy
 00000636  BA 00000BB8 R	    mov edx, offset instrucChoose
 0000063B  E8 00000000 E	    call WriteString
				    
 00000640  E8 00000000 E	    call ReadInt
				    
				    ; Any key returns to menu
 00000645  C3			    ret
 00000646			HighscoresScreen endp

				;***********************************************************


 00000646			Level1Screen PROC
 00000646  E8 00000000 E	    call Clrscr
 0000064B  E8 FFFFF9EA		    call levelSound
				    
				    ; Draw borders
 00000650  E8 000000F9		    call DrawBorders
				    
				    ; Draw walls
 00000655  E8 000001F0		    call DrawWallsLevel1
				    
				    ; Initialize pellets
 0000065A  E8 00000452		    call InitializePellets
				    
				    
				    ; Initialize ghost position
 0000065F  C6 05 00000DBE R	    mov ghost1X, 20
	   14
 00000666  C6 05 00000DBF R	    mov ghost1Y, 10
	   0A
				    
				    ; Draw initial positions
				    call DrawPlayer
CODE.asm(782) : error A2006:undefined symbol : DrawPlayer
				    call DrawGhost1
CODE.asm(783) : error A2006:undefined symbol : DrawGhost1
				    
				    ; Main game loop
 00000683			gameLoop:
				    ; Handle input
 00000683  E8 00000000 E	    call ReadKey
 00000688  74 7B		    jz no_input
				    mov inputChar, al
CODE.asm(790) : error A2006:undefined symbol : inputChar
				    
				    ; Check for exit
				    cmp inputChar, 'Q'
CODE.asm(793) : error A2006:undefined symbol : inputChar
 0000068A  0F 84 000000BD	    je exitLevel
				    
				    ; Movement handling
				    cmp inputChar, 'W'
CODE.asm(797) : error A2006:undefined symbol : inputChar
				    je moveUp
CODE.asm(798) : error A2024:invalid operand size for instruction
				    cmp inputChar, 'A'
CODE.asm(799) : error A2006:undefined symbol : inputChar
				    je moveLeft
CODE.asm(800) : error A2024:invalid operand size for instruction
				    cmp inputChar, 'S'
CODE.asm(801) : error A2006:undefined symbol : inputChar
				    je moveDown
CODE.asm(802) : error A2024:invalid operand size for instruction
				    cmp inputChar, 'D'
CODE.asm(803) : error A2006:undefined symbol : inputChar
				    je moveRight
CODE.asm(804) : error A2024:invalid operand size for instruction
				    
 00000705			no_input:
				    ; Update ghost
 00000705  E8 00000262		    call UpdateGhost1
				    
				    ; Check collisions
 0000070A  E8 0000041E		    call CheckPelletCollision
 0000070F  E8 000004A1		    call CheckGhostCollision
				    
				    ; Check win condition (all pellets collected)
				    cmp num_coins, 0
CODE.asm(815) : error A2006:undefined symbol : num_coins
 00000714  74 31		    je levelComplete
				    
				    ; Delay for game speed
 00000716  B8 00000064		    mov eax, 100
 0000071B  E8 00000000 E	    call Delay
				    
 00000720  E9 FFFFFF5E		    jmp gameLoop
				    
				moveUp:
CODE.asm(824) : error A2005:symbol redefinition : moveUp
				    ; Handle up movement
				    ; (Include wall collision checks)
 00000725  E9 FFFFFF59		    jmp gameLoop
				    
				moveLeft:
CODE.asm(829) : error A2005:symbol redefinition : moveLeft
				    ; Handle left movement
 0000072A  E9 FFFFFF54		    jmp gameLoop
				    
				moveDown:
CODE.asm(833) : error A2005:symbol redefinition : moveDown
				    ; Handle down movement
 0000072F  E9 FFFFFF4F		    jmp gameLoop
				    
				moveRight:
CODE.asm(837) : error A2005:symbol redefinition : moveRight
				    ; Handle right movement
 00000734  E9 FFFFFF4A		    jmp gameLoop
				    
 00000747			levelComplete:
				    ; Handle level completion
 00000747  FE 05 00000D70 R	    inc currentLevel
				    ; Proceed to next level or game complete
				    
 0000074D			exitLevel:
 0000074D  C3			    ret
 0000074E			Level1Screen ENDP

 0000074E			DrawBorders proc

 0000074E  B8 00000001		    mov eax, blueTxt
 00000753  E8 00000000 E	    call SetTextColor


				   ; Top border 
 00000758  B6 00		    mov dh, 0
 0000075A  B2 00		    mov dl, 0
 0000075C  B9 00000050		    mov ecx, GAME_WIDTH
 00000761  B0 23		    mov al, '#'
 00000763			    draw_top:
 00000763  E8 00000000 E	        call Gotoxy
 00000768  E8 00000000 E	        call WriteChar
 0000076D  FE C2		        inc dl
 0000076F  E2 F2		        loop draw_top
				    
				    ; Bottom border
 00000771  B6 19		    mov dh, 25
 00000773  B2 00		    mov dl, 0
 00000775  B9 00000050		    mov ecx, GAME_WIDTH
 0000077A			    draw_bottom:
 0000077A  E8 00000000 E	        call Gotoxy
 0000077F  E8 00000000 E	        call WriteChar
 00000784  FE C2		        inc dl
 00000786  E2 F2		        loop draw_bottom
				    
				    ; Left border (rows 1-25)
 00000788  B6 01		    mov dh, 1
 0000078A  B2 00		    mov dl, 0
 0000078C  B9 00000019		    mov ecx, 25
 00000791			    draw_left:
 00000791  E8 00000000 E	        call Gotoxy
 00000796  E8 00000000 E	        call WriteChar
 0000079B  FE C6		        inc dh
 0000079D  E2 F2		        loop draw_left
				    
				    ; Right border ( rows 1-25)
 0000079F  B6 01		    mov dh, 1
 000007A1  B2 4F		    mov dl, GAME_WIDTH-1
 000007A3  B9 00000019		    mov ecx, 25
 000007A8			    draw_right:
 000007A8  E8 00000000 E	        call Gotoxy
 000007AD  E8 00000000 E	        call WriteChar
 000007B2  FE C6		        inc dh
 000007B4  E2 F2		        loop draw_right
				    
				    ; 2.  info panel
 000007B6  B8 0000000E		    mov eax, yellowTxt
 000007BB  E8 00000000 E	    call SetTextColor
				    
				    ; Level text
 000007C0  B6 05		    mov dh, 5
 000007C2  B2 5A		    mov dl, INFO_START
 000007C4  E8 00000000 E	    call Gotoxy
 000007C9  BA 00000D8E R	    mov edx, offset levelText
 000007CE  E8 00000000 E	    call WriteString
				    
				    ; Score
 000007D3  B6 07		    mov dh, 7
 000007D5  B2 5A		    mov dl, INFO_START
 000007D7  E8 00000000 E	    call Gotoxy
 000007DC  BA 00000D96 R	    mov edx, offset scoreText
 000007E1  E8 00000000 E	    call WriteString
 000007E6  A1 00000D71 R	    mov eax, score
 000007EB  E8 00000000 E	    call WriteDec
				    
				    ; High score
 000007F0  B6 09		    mov dh, 9
 000007F2  B2 5A		    mov dl, INFO_START
 000007F4  E8 00000000 E	    call Gotoxy
 000007F9  BA 00000D9E R	    mov edx, offset highScoreText
 000007FE  E8 00000000 E	    call WriteString
 00000803  A1 00000D75 R	    mov eax, highScore
 00000808  E8 00000000 E	    call WriteDec
				    
				    ; Lives
 0000080D  B6 0B		    mov dh, 11
 0000080F  B2 5A		    mov dl, INFO_START
 00000811  E8 00000000 E	    call Gotoxy
 00000816  BA 00000DAA R	    mov edx, offset livesText
 0000081B  E8 00000000 E	    call WriteString
 00000820  0F B6 05		    movzx eax, lives
	   00000D79 R
 00000827  E8 00000000 E	    call WriteDec
				    
				    ; Player name
 0000082C  B6 0D		    mov dh, 13
 0000082E  B2 5A		    mov dl, INFO_START
 00000830  E8 00000000 E	    call Gotoxy
 00000835  BA 00000DB2 R	    mov edx, offset playerText
 0000083A  E8 00000000 E	    call WriteString
 0000083F  BA 000000A7 R	    mov edx, offset userName
 00000844  E8 00000000 E	    call WriteString
				      
 00000849  C3			    ret
 0000084A			DrawBorders endp

 0000084A			DrawWallsLevel1 PROC
				    ; Set wall color
 0000084A  B8 00000009		    mov eax, lightblue
 0000084F  E8 00000000 E	    call SetTextColor
				    
				    ; First set of 2 horizontal walls
 00000854  B8 0000000A		    mov eax, 10      ; X position
 00000859  BB 00000005		    mov ebx, 5       ; Y position
 0000085E  B9 0000000F		    mov ecx, 15      ; Length
 00000863  E8 000000C9		    call DrawHorizontalWall
				    
 00000868  B8 0000000A		    mov eax, 10      ; X position
 0000086D  BB 00000006		    mov ebx, 6       ; Y position (right below first wall)
 00000872  B9 0000000F		    mov ecx, 15      ; Length
 00000877  E8 000000B5		    call DrawHorizontalWall
				    
				    ; Gap of 2 rows
				    
				    ; Next set of 5 horizontal walls
 0000087C  B8 00000014		    mov eax, 20      ; X position
 00000881  BB 00000009		    mov ebx, 9       ; Y position
 00000886  B9 0000000A		    mov ecx, 10      ; Length
 0000088B  E8 000000A1		    call DrawHorizontalWall
				    
 00000890  B8 00000014		    mov eax, 20
 00000895  BB 0000000A		    mov ebx, 10
 0000089A  B9 0000000A		    mov ecx, 10
 0000089F  E8 0000008D		    call DrawHorizontalWall
				    
 000008A4  B8 00000014		    mov eax, 20
 000008A9  BB 0000000B		    mov ebx, 11
 000008AE  B9 0000000A		    mov ecx, 10
 000008B3  E8 00000079		    call DrawHorizontalWall
				    
 000008B8  B8 00000014		    mov eax, 20
 000008BD  BB 0000000C		    mov ebx, 12
 000008C2  B9 0000000A		    mov ecx, 10
 000008C7  E8 00000065		    call DrawHorizontalWall
				    
 000008CC  B8 00000014		    mov eax, 20
 000008D1  BB 0000000D		    mov ebx, 13
 000008D6  B9 0000000A		    mov ecx, 10
 000008DB  E8 00000051		    call DrawHorizontalWall
				    
				    ; Gap of 2 rows
				    
				    ; Next set of 2 horizontal walls
 000008E0  B8 0000001E		    mov eax, 30
 000008E5  BB 00000010		    mov ebx, 16
 000008EA  B9 0000000C		    mov ecx, 12
 000008EF  E8 0000003D		    call DrawHorizontalWall
				    
 000008F4  B8 0000001E		    mov eax, 30
 000008F9  BB 00000011		    mov ebx, 17
 000008FE  B9 0000000C		    mov ecx, 12
 00000903  E8 00000029		    call DrawHorizontalWall
				    
				    ; Final 2 vertical walls
 00000908  B8 00000028		    mov eax, 40
 0000090D  BB 00000005		    mov ebx, 5
 00000912  B9 0000000A		    mov ecx, 10      ; Height
 00000917  E8 00000030		    call DrawVerticalWall
				    
 0000091C  B8 00000032		    mov eax, 50
 00000921  BB 00000005		    mov ebx, 5
 00000926  B9 0000000A		    mov ecx, 10
 0000092B  E8 0000001C		    call DrawVerticalWall
				    
 00000930  C3			    ret
 00000931			DrawWallsLevel1 ENDP

 00000931			DrawHorizontalWall PROC
				    ; Draws a horizontal wall
				    ; Input: eax = x, ebx = y, ecx = length
 00000931  50			    push eax
 00000932  53			    push ebx
 00000933  51			    push ecx
				    
 00000934  8A D0		    mov dl, al      ; X position
 00000936  8A F3		    mov dh, bl      ; Y position
 00000938  E8 00000000 E	    call Gotoxy
				    
 0000093D  B0 23		    mov al, '#'     ; Wall character
 0000093F			    draw_hor_loop:
 0000093F  E8 00000000 E	        call WriteChar
 00000944  FE C2		        inc dl
 00000946  E2 F7		        loop draw_hor_loop
				    
 00000948  59			    pop ecx
 00000949  5B			    pop ebx
 0000094A  58			    pop eax
 0000094B  C3			    ret
 0000094C			DrawHorizontalWall ENDP

 0000094C			DrawVerticalWall PROC
				    ; Draws a vertical wall
				    ; Input: eax = x, ebx = y, ecx = height
 0000094C  50			    push eax
 0000094D  53			    push ebx
 0000094E  51			    push ecx
				    
 0000094F  8A D0		    mov dl, al      ; X position
 00000951  8A F3		    mov dh, bl      ; Y position
 00000953  E8 00000000 E	    call Gotoxy
				    
 00000958  B0 23		    mov al, '#'     ; Wall character
 0000095A			    draw_vert_loop:
 0000095A  E8 00000000 E	        call WriteChar
 0000095F  FE C6		        inc dh
 00000961  E8 00000000 E	        call Gotoxy
 00000966  E2 F2		        loop draw_vert_loop
				    
 00000968  59			    pop ecx
 00000969  5B			    pop ebx
 0000096A  58			    pop eax
 0000096B  C3			    ret
 0000096C			DrawVerticalWall ENDP

 0000096C			UpdateGhost1 PROC
				    ; Ghost movement logic - tries to come closer to Pacman
				    ; Compare ghost position with pacman position
				    
				    ; First check X direction
 0000096C  A0 00000DBE R	    mov al, ghost1X
 00000971  3A 05 00000DBC R	    cmp al, pacmanX
 00000977  7C 16		    jl move_ghost_right   ; If ghost is left of pacman, move right
 00000979  7F 3D		    jg move_ghost_left    ; If ghost is right of pacman, move left
				    
				    ; If X positions are equal, check Y direction
 0000097B  A0 00000DBF R	    mov al, ghost1Y
 00000980  3A 05 00000DBD R	    cmp al, pacmanY
 00000986  7C 69		    jl move_ghost_down    ; If ghost is above pacman, move down
 00000988  0F 8F 0000008B	    jg move_ghost_up      ; If ghost is below pacman, move up
				    
				    ; If positions are equal, don't move
 0000098E  C3			    ret
				    
 0000098F			move_ghost_right:
 0000098F  E8 000000AD		    call CanMoveRight
 00000994  80 FA 01		    cmp dl, 1
 00000997  74 02		    je move_right
 00000999  EB 46		    jmp check_y_direction
				    
 0000099B			move_right:
				    call UpdateGhost
CODE.asm(1091) : error A2006:undefined symbol : UpdateGhost
 0000099B  FE 05 00000DBE R	    inc ghost1X
				    call DrawGhost1
CODE.asm(1093) : error A2006:undefined symbol : DrawGhost1
 000009A1  C3			    ret
				    
 000009B8			move_ghost_left:
 000009B8  E8 00000099		    call CanMoveLeft
 000009BD  80 FA 01		    cmp dl, 1
 000009C0  74 02		    je move_left
 000009C2  EB 1D		    jmp check_y_direction
				    
 000009C4			move_left:
				    call UpdateGhost
CODE.asm(1103) : error A2006:undefined symbol : UpdateGhost
 000009C4  FE 0D 00000DBE R	    dec ghost1X
				    call DrawGhost1
CODE.asm(1105) : error A2006:undefined symbol : DrawGhost1
 000009CA  C3			    ret
				    
 000009E1			check_y_direction:
 000009E1  A0 00000DBF R	    mov al, ghost1Y
 000009E6  3A 05 00000DBD R	    cmp al, pacmanY
 000009EC  7C 03		    jl move_ghost_down
 000009EE  7F 29		    jg move_ghost_up
 000009F0  C3			    ret
				    
 000009F1			move_ghost_down:
 000009F1  E8 0000008A		    call CanMoveDown
 000009F6  80 FA 01		    cmp dl, 1
 000009F9  74 01		    je move_down
 000009FB  C3			    ret
				    
 000009FC			move_down:
				    call UpdateGhost
CODE.asm(1122) : error A2006:undefined symbol : UpdateGhost
 000009FC  FE 05 00000DBF R	    inc ghost1Y
				    call DrawGhost1
CODE.asm(1124) : error A2006:undefined symbol : DrawGhost1
 00000A02  C3			    ret
				    
 00000A19			move_ghost_up:
 00000A19  E8 0000004D		    call CanMoveUp
 00000A1E  80 FA 01		    cmp dl, 1
 00000A21  74 01		    je move_up
 00000A23  C3			    ret
				    
 00000A24			move_up:
				    call UpdateGhost
CODE.asm(1134) : error A2006:undefined symbol : UpdateGhost
 00000A24  FE 0D 00000DBF R	    dec ghost1Y
				    call DrawGhost1
CODE.asm(1136) : error A2006:undefined symbol : DrawGhost1
 00000A2A  C3			    ret
 00000A2B			UpdateGhost1 ENDP

 00000A2B			CanMoveRight PROC
				    ; Check if ghost can move right
 00000A2B  0F B6 0D		    movzx ecx, ghost1X
	   00000DBE R
 00000A32  41			    inc ecx             ; Check position to the right
 00000A33  0F B6 15		    movzx edx, ghost1Y
	   00000DBF R
 00000A3A  E8 00000056		    call CheckWallCollision
 00000A3F  C3			    ret
 00000A40			CanMoveRight ENDP

 00000A40			CanMoveLeft PROC
				    ; Check if ghost can move left
 00000A40  0F B6 0D		    movzx ecx, ghost1X
	   00000DBE R
 00000A47  49			    dec ecx             ; Check position to the left
 00000A48  0F B6 15		    movzx edx, ghost1Y
	   00000DBF R
 00000A4F  E8 00000041		    call CheckWallCollision
 00000A54  C3			    ret
 00000A55			CanMoveLeft ENDP

 00000A55			CanMoveUp PROC
				    ; Check if ghost can move up
 00000A55  0F B6 0D		    movzx ecx, ghost1X
	   00000DBE R
 00000A5C  0F B6 15		    movzx edx, ghost1Y
	   00000DBF R
 00000A63  4A			    dec edx             ; Check position above
 00000A64  E8 0000002C		    call CheckWallCollision
 00000A69  C3			    ret
 00000A6A			CanMoveUp ENDP

 00000A6A			CanMoveDown PROC
				    ; Check if ghost can move down
 00000A6A  0F B6 0D		    movzx ecx, ghost1X
	   00000DBE R
 00000A71  0F B6 15		    movzx edx, ghost1Y
	   00000DBF R
 00000A78  42			    inc edx             ; Check position below
 00000A79  E8 00000017		    call CheckWallCollision
 00000A7E  C3			    ret
 00000A7F			CanMoveDown ENDP

 00000A7F			CheckWallCollision PROC
				    ; Checks if position (ecx, edx) is a wall
				    ; Returns dl = 1 if can move (no wall), dl = 0 if wall
 00000A7F  8B D9		    mov ebx, ecx
 00000A81  6B DB 1E		    imul ebx, 30        ; Assuming grid is 70x30
 00000A84  03 DA		    add ebx, edx
				    mov al, BYTE PTR [grid + ebx]
CODE.asm(1182) : error A2006:undefined symbol : grid
 00000A86  3C 01		    cmp al, 1           ; 1 represents wall
 00000A88  74 24		    je is_wall
 00000A8A  B2 01		    mov dl, 1           ; Can move
 00000A8C  C3			    ret
 00000AAE			is_wall:
 00000AAE  B2 00		    mov dl, 0           ; Cannot move
 00000AB0  C3			    ret
 00000AB1			CheckWallCollision ENDP

 00000AB1			InitializePellets PROC
				    ; Initialize pellets for Level 1
 00000AB1  B9 00000032		    mov ecx, 50         ; Number of pellets for Level 1
				    mov num_coins, cl
CODE.asm(1195) : error A2006:undefined symbol : num_coins
				    
				    ; Clear pellet array
 00000AB6  BF 00000DC2 R	    mov edi, OFFSET pellets
 00000ABB  B9 000007D0		    mov ecx, GAME_WIDTH * 25
 00000AC0  B0 00		    mov al, 0
 00000AC2  F3/ AA		    rep stosb
				    
				    ; Place pellets in valid positions
 00000AC4  B9 00000032		    mov ecx, 50
 00000AD4			place_pellets:
 00000AD4  E8 0000003A		    call GetRandomPosition
				    ; Check if position is valid (not wall and not already pellet)
 00000AD9  8B D8		    mov ebx, eax
 00000ADB  6B DB 1E		    imul ebx, 30
 00000ADE  03 DA		    add ebx, edx
				    cmp BYTE PTR [grid + ebx], 1   ; Wall
CODE.asm(1211) : error A2006:undefined symbol : grid
 00000AE0  74 F2		    je place_pellets
 00000AE2  80 BB 00000DC2 R	    cmp BYTE PTR [pellets + ebx], 1 ; Already pellet
	   01
 00000AE9  74 E9		    je place_pellets
				    
				    ; Place pellet
 00000AEB  C6 83 00000DC2 R	    mov BYTE PTR [pellets + ebx], 1
	   01
				    
				    ; Draw pellet
 00000AF2  8A D0		    mov dl, al
 00000AF4  8A F2		    mov dh, dl
 00000AF6  E8 00000000 E	    call Gotoxy
 00000AFB  B0 2E		    mov al, '.'
 00000AFD  E8 00000000 E	    call WriteChar
				    
 00000B02  E2 D0		    loop place_pellets
				    
 00000B04  C3			    ret
 00000B05			InitializePellets ENDP

 00000B05			GetRandomPosition PROC
				    ; Returns random position in eax (x), edx (y)
 00000B05  B8 0000004E		    mov eax, GAME_WIDTH - 2
 00000B0A  E8 00000000 E	    call RandomRange
 00000B0F  40			    inc eax             ; Avoid left border
 00000B10  8B D0		    mov edx, eax        ; Save x in edx
				    
 00000B12  B8 00000018		    mov eax, 24         ; 25 rows (0-24)
 00000B17  E8 00000000 E	    call RandomRange
 00000B1C  40			    inc eax             ; Avoid top border
				    
 00000B1D  92			    xchg eax, edx       ; Now eax has x, edx has y
 00000B1E  C3			    ret
 00000B1F			GetRandomPosition ENDP

 00000B1F			CheckPelletCollision PROC
				    ; Check if pacman is on a pellet
 00000B1F  0F B6 05		    movzx eax, pacmanX
	   00000DBC R
 00000B26  0F B6 15		    movzx edx, pacmanY
	   00000DBD R
 00000B2D  8B D8		    mov ebx, eax
 00000B2F  6B DB 1E		    imul ebx, 30
 00000B32  03 DA		    add ebx, edx
 00000B34  80 BB 00000DC2 R	    cmp BYTE PTR [pellets + ebx], 1
	   01
 00000B3B  75 4D		    jne no_pellet
				    
				    ; Pellet collected
 00000B3D  C6 83 00000DC2 R	    mov BYTE PTR [pellets + ebx], 0  ; Remove pellet
	   00
 00000B44  FF 05 00000D71 R	    inc score
				    
				    ; Update score display
 00000B4A  B8 0000000E		    mov eax, yellow
 00000B4F  E8 00000000 E	    call SetTextColor
 00000B54  B2 4B		    mov dl, 75
 00000B56  B6 05		    mov dh, 5
 00000B58  E8 00000000 E	    call Gotoxy
 00000B5D  BA 00000D96 R	    mov edx, OFFSET scoreText
 00000B62  E8 00000000 E	    call WriteString
 00000B67  A1 00000D71 R	    mov eax, score
 00000B6C  E8 00000000 E	    call WriteDec
				    
				    dec num_coins       ; Decrement remaining pellets
CODE.asm(1271) : error A2006:undefined symbol : num_coins
				    
 00000B8A			no_pellet:
 00000B8A  C3			    ret
 00000B8B			CheckPelletCollision ENDP

 00000B8B			UpdateLivesDisplay PROC
				    ; Update lives display
 00000B8B  B8 00000009		    mov eax, lightblue
 00000B90  E8 00000000 E	    call SetTextColor
 00000B95  B2 4B		    mov dl, 75
 00000B97  B6 09		    mov dh, 9
 00000B99  E8 00000000 E	    call Gotoxy
 00000B9E  BA 00000DAA R	    mov edx, OFFSET livesText
 00000BA3  E8 00000000 E	    call WriteString
 00000BA8  0F B6 05		    movzx eax, lives
	   00000D79 R
 00000BAF  E8 00000000 E	    call WriteDec
 00000BB4  C3			    ret
 00000BB5			UpdateLivesDisplay ENDP

 00000BB5			CheckGhostCollision PROC
				    ; Check collision with ghost
 00000BB5  A0 00000DBE R	    mov al, ghost1X
 00000BBA  3A 05 00000DBC R	    cmp al, pacmanX
 00000BC0  75 34		    jne no_collision
 00000BC2  A0 00000DBF R	    mov al, ghost1Y
 00000BC7  3A 05 00000DBD R	    cmp al, pacmanY
 00000BCD  75 27		    jne no_collision
				    
				    ; Collision occurred
 00000BCF  FE 0D 00000D79 R	    dec lives
 00000BD5  E8 FFFFFFB1		    call UpdateLivesDisplay
				    
				    ; Reset positions
 00000BDA  C6 05 00000DBC R	    mov pacmanX, 40
	   28
 00000BE1  C6 05 00000DBD R	    mov pacmanY, 12
	   0C
				    
				    ; Check if game over
 00000BE8  80 3D 00000D79 R	    cmp lives, 0
	   00
 00000BEF  7F 05		    jg no_collision
 00000BF1  E8 00000001		    call GameOver
				    
 00000BF6			no_collision:
 00000BF6  C3			    ret
 00000BF7			CheckGhostCollision ENDP

 00000BF7			GameOver PROC
				    ; Handle game over
 00000BF7  E8 00000001		    call SaveHighScore
				    ; Display game over message
				    ; Return to menu
 00000BFC  C3			    ret
 00000BFD			GameOver ENDP

 00000BFD			SaveHighScore PROC
				    ; Save highscore to file if current score is higher
 00000BFD  A1 00000D71 R	    mov eax, score
 00000C02  3B 05 00000D75 R	    cmp eax, highScore
 00000C08  7E 77		    jle no_new_high
				    
				    ; New high score
 00000C0A  A3 00000D75 R	    mov highScore, eax
				    
				    ; Open file for writing
 00000C0F  BA 00000088 R	    mov edx, OFFSET fileName
 00000C14  E8 00000000 E	    call CreateOutputFile
				    mov fileHandle, eax
CODE.asm(1337) : error A2006:undefined symbol : fileHandle
				    
				    ; Write player name and score
 00000C19  BA 000000A7 R	    mov edx, OFFSET userName
 00000C1E  B9 00000032		    mov ecx, LENGTHOF userName
 00000C23  E8 00000000 E	    call WriteToFile
				    
				    ; Write space separator
				    mov edx, OFFSET space
CODE.asm(1345) : error A2006:undefined symbol : space
 00000C28  B9 00000001		    mov ecx, 1
 00000C2D  E8 00000000 E	    call WriteToFile
				    
				    ; Write score
 00000C32  A1 00000D71 R	    mov eax, score
 00000C37  E8 00000000 E	    call WriteInt
				    
				    ; Write space separator
				    mov edx, OFFSET space
CODE.asm(1354) : error A2006:undefined symbol : space
 00000C3C  B9 00000001		    mov ecx, 1
 00000C41  E8 00000000 E	    call WriteToFile
				    
				    ; Write level
 00000C46  A0 00000D70 R	    mov al, currentLevel
 00000C4B  E8 00000000 E	    call WriteInt
				    
				    ; Close file
				    mov eax, fileHandle
CODE.asm(1363) : error A2006:undefined symbol : fileHandle
 00000C50  E8 00000000 E	    call CloseFile
				    
 00000C81			no_new_high:
 00000C81  C3			    ret
 00000C82			SaveHighScore ENDP


				;-----------------------------------------------------

 00000C82			Level2Screen proc
 00000C82			Level2Screen endp

 00000C82			Level3Screen proc
 00000C82			Level3Screen endp

				end main

Microsoft (R) Macro Assembler Version 14.42.34436.0	    05/11/25 21:43:41
CODE.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000015AC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000C82 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CanMoveDown  . . . . . . . . . .	P Near	 00000A80 _TEXT	Length= 00000015 Public STDCALL
CanMoveLeft  . . . . . . . . . .	P Near	 00000A56 _TEXT	Length= 00000015 Public STDCALL
CanMoveRight . . . . . . . . . .	P Near	 00000A41 _TEXT	Length= 00000015 Public STDCALL
CanMoveUp  . . . . . . . . . . .	P Near	 00000A6B _TEXT	Length= 00000015 Public STDCALL
CheckGhostCollision  . . . . . .	P Near	 00000BB5 _TEXT	Length= 00000042 Public STDCALL
  no_collision . . . . . . . . .	L Near	 00000BF6 _TEXT	
CheckPelletCollision . . . . . .	P Near	 00000B2D _TEXT	Length= 0000005E Public STDCALL
  no_pellet  . . . . . . . . . .	L Near	 00000B8A _TEXT	
CheckWallCollision . . . . . . .	P Near	 00000A95 _TEXT	Length= 0000001C Public STDCALL
  is_wall  . . . . . . . . . . .	L Near	 00000AAE _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawBorders  . . . . . . . . . .	P Near	 0000074E _TEXT	Length= 000000FC Public STDCALL
  draw_top . . . . . . . . . . .	L Near	 00000763 _TEXT	
  draw_bottom  . . . . . . . . .	L Near	 0000077A _TEXT	
  draw_left  . . . . . . . . . .	L Near	 00000791 _TEXT	
  draw_right . . . . . . . . . .	L Near	 000007A8 _TEXT	
DrawHorizontalWall . . . . . . .	P Near	 00000931 _TEXT	Length= 0000001B Public STDCALL
  draw_hor_loop  . . . . . . . .	L Near	 0000093F _TEXT	
DrawVerticalWall . . . . . . . .	P Near	 0000094C _TEXT	Length= 00000020 Public STDCALL
  draw_vert_loop . . . . . . . .	L Near	 0000095A _TEXT	
DrawWallsLevel1  . . . . . . . .	P Near	 0000084A _TEXT	Length= 000000E7 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameOver . . . . . . . . . . . .	P Near	 00000BF7 _TEXT	Length= 00000006 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRandomPosition  . . . . . . .	P Near	 00000B13 _TEXT	Length= 0000001A Public STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HighscoresScreen . . . . . . . .	P Near	 000005B0 _TEXT	Length= 00000096 Public STDCALL
InitializePellets  . . . . . . .	P Near	 00000AB1 _TEXT	Length= 00000062 Public STDCALL
  place_pellets  . . . . . . . .	L Near	 00000AD4 _TEXT	
InstructionsScreen . . . . . . .	P Near	 000004D6 _TEXT	Length= 000000DA Public STDCALL
  ReturnToMenu . . . . . . . . .	L Near	 000005A3 _TEXT	
  ExitGame . . . . . . . . . . .	L Near	 000005A4 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Level1Screen . . . . . . . . . .	P Near	 00000646 _TEXT	Length= 00000108 Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 00000683 _TEXT	
  no_input . . . . . . . . . . .	L Near	 00000705 _TEXT	
  levelComplete  . . . . . . . .	L Near	 00000747 _TEXT	
  exitLevel  . . . . . . . . . .	L Near	 0000074D _TEXT	
Level2Screen . . . . . . . . . .	P Near	 00000C82 _TEXT	Length= 00000000 Public STDCALL
Level3Screen . . . . . . . . . .	P Near	 00000C82 _TEXT	Length= 00000000 Public STDCALL
LevelSelectScreen  . . . . . . .	P Near	 00000313 _TEXT	Length= 000001C3 Public STDCALL
  StartLevel1  . . . . . . . . .	L Near	 000004A5 _TEXT	
  StartLevel2  . . . . . . . . .	L Near	 000004B1 _TEXT	
  StartLevel3  . . . . . . . . .	L Near	 000004BD _TEXT	
  ReturnToMenu . . . . . . . . .	L Near	 000004C9 _TEXT	
  ExitGame . . . . . . . . . . .	L Near	 000004CA _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MenuScreen . . . . . . . . . . .	P Near	 00000197 _TEXT	Length= 0000017C Public STDCALL
  LevelSelection . . . . . . . .	L Near	 000002E9 _TEXT	
  ShowInstructions . . . . . . .	L Near	 000002F3 _TEXT	
  ShowHighscores . . . . . . . .	L Near	 000002FD _TEXT	
  ExitGame . . . . . . . . . . .	L Near	 00000307 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaySound  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveHighScore  . . . . . . . . .	P Near	 00000BFD _TEXT	Length= 00000085 Public STDCALL
  no_new_high  . . . . . . . . .	L Near	 00000C81 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGhost1 . . . . . . . . . .	P Near	 0000096C _TEXT	Length= 000000D5 Public STDCALL
  move_ghost_right . . . . . . .	L Near	 0000098F _TEXT	
  move_right . . . . . . . . . .	L Near	 0000099B _TEXT	
  move_ghost_left  . . . . . . .	L Near	 000009B8 _TEXT	
  move_left  . . . . . . . . . .	L Near	 000009C4 _TEXT	
  check_y_direction  . . . . . .	L Near	 000009E1 _TEXT	
  move_ghost_down  . . . . . . .	L Near	 000009F1 _TEXT	
  move_down  . . . . . . . . . .	L Near	 000009FC _TEXT	
  move_ghost_up  . . . . . . . .	L Near	 00000A19 _TEXT	
  move_up  . . . . . . . . . . .	L Near	 00000A24 _TEXT	
UpdateLivesDisplay . . . . . . .	P Near	 00000B8B _TEXT	Length= 0000002A Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WelcomeScreen  . . . . . . . . .	P Near	 0000005E _TEXT	Length= 00000139 Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introSound . . . . . . . . . . .	P Near	 00000016 _TEXT	Length= 00000024 Public STDCALL
  no_error1  . . . . . . . . . .	L Near	 00000037 _TEXT	
levelSound . . . . . . . . . . .	P Near	 0000003A _TEXT	Length= 00000024 Public STDCALL
  no_error2  . . . . . . . . . .	L Near	 0000005B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000016 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GAME_WIDTH . . . . . . . . . . .	Number	 00000050h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INFO_START . . . . . . . . . . .	Number	 0000005Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PacmanIntro  . . . . . . . . . .	Byte	 00000028 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SND_ASYNC  . . . . . . . . . . .	Number	 00000001h   
SND_FILENAME . . . . . . . . . .	Number	 00020000h   
SND_SYNC . . . . . . . . . . . .	Number	 00000000h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SoundError . . . . . . . . . . .	Byte	 0000005C _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blueTxt  . . . . . . . . . . . .	Number	 00000001h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentLevel . . . . . . . . . .	Byte	 00000D70 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exitKey  . . . . . . . . . . . .	Byte	 000015AB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileName . . . . . . . . . . . .	Byte	 00000088 _DATA	
gamePause1 . . . . . . . . . . .	Byte	 00000D20 _DATA	
gamePause2 . . . . . . . . . . .	Byte	 00000D32 _DATA	
gamePause3 . . . . . . . . . . .	Byte	 00000D47 _DATA	
gamePause4 . . . . . . . . . . .	Byte	 00000D5B _DATA	
ghost1Dir  . . . . . . . . . . .	Byte	 00000DC0 _DATA	
ghost1X  . . . . . . . . . . . .	Byte	 00000DBE _DATA	
ghost1Y  . . . . . . . . . . . .	Byte	 00000DBF _DATA	
ghost2Dir  . . . . . . . . . . .	Byte	 00000DC1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenTxt . . . . . . . . . . . .	Number	 00000002h   
green  . . . . . . . . . . . . .	Number	 00000002h   
highScoreText  . . . . . . . . .	Byte	 00000D9E _DATA	
highScore  . . . . . . . . . . .	DWord	 00000D75 _DATA	
hsTitle0 . . . . . . . . . . . .	Byte	 00000BEA _DATA	
hsTitle1 . . . . . . . . . . . .	Byte	 00000C28 _DATA	
hsTitle2 . . . . . . . . . . . .	Byte	 00000C66 _DATA	
hsTitle3 . . . . . . . . . . . .	Byte	 00000CA4 _DATA	
hsTitle4 . . . . . . . . . . . .	Byte	 00000CE2 _DATA	
inputName  . . . . . . . . . . .	Byte	 00000092 _DATA	
instruc1 . . . . . . . . . . . .	Byte	 00000987 _DATA	
instruc2 . . . . . . . . . . . .	Byte	 000009CB _DATA	
instruc3 . . . . . . . . . . . .	Byte	 00000A13 _DATA	
instruc4 . . . . . . . . . . . .	Byte	 00000A5B _DATA	
instruc5 . . . . . . . . . . . .	Byte	 00000A7F _DATA	
instruc6 . . . . . . . . . . . .	Byte	 00000AA3 _DATA	
instruc7 . . . . . . . . . . . .	Byte	 00000AE7 _DATA	
instruc8 . . . . . . . . . . . .	Byte	 00000B26 _DATA	
instruc9 . . . . . . . . . . . .	Byte	 00000B6F _DATA	
instrucChoose  . . . . . . . . .	Byte	 00000BB8 _DATA	
level1opt0 . . . . . . . . . . .	Byte	 00000658 _DATA	
level1opt1 . . . . . . . . . . .	Byte	 00000687 _DATA	
level1opt2 . . . . . . . . . . .	Byte	 000006B6 _DATA	
level1opt3 . . . . . . . . . . .	Byte	 000006E5 _DATA	
level1opt4 . . . . . . . . . . .	Byte	 00000714 _DATA	
level2opt0 . . . . . . . . . . .	Byte	 00000743 _DATA	
level2opt1 . . . . . . . . . . .	Byte	 00000772 _DATA	
level2opt2 . . . . . . . . . . .	Byte	 000007A1 _DATA	
level2opt3 . . . . . . . . . . .	Byte	 000007D0 _DATA	
level2opt4 . . . . . . . . . . .	Byte	 000007FF _DATA	
level3opt0 . . . . . . . . . . .	Byte	 0000082E _DATA	
level3opt1 . . . . . . . . . . .	Byte	 0000085D _DATA	
level3opt2 . . . . . . . . . . .	Byte	 0000088C _DATA	
level3opt3 . . . . . . . . . . .	Byte	 000008BB _DATA	
level3opt4 . . . . . . . . . . .	Byte	 000008EA _DATA	
levelText  . . . . . . . . . . .	Byte	 00000D8E _DATA	
leveloptchoose1  . . . . . . . .	Byte	 00000919 _DATA	
leveloptchoose2  . . . . . . . .	Byte	 00000952 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
livesText  . . . . . . . . . . .	Byte	 00000DAA _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000D79 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuopt0 . . . . . . . . . . . .	Byte	 00000577 _DATA	
menuopt1 . . . . . . . . . . . .	Byte	 00000599 _DATA	
menuopt2 . . . . . . . . . . . .	Byte	 000005BB _DATA	
menuopt3 . . . . . . . . . . . .	Byte	 000005DD _DATA	
menuopt4 . . . . . . . . . . . .	Byte	 000005FF _DATA	
menuopt5 . . . . . . . . . . . .	Byte	 00000621 _DATA	
menuoptchoose  . . . . . . . . .	Byte	 00000643 _DATA	
menutitle0 . . . . . . . . . . .	Byte	 0000045F _DATA	
menutitle1 . . . . . . . . . . .	Byte	 0000048E _DATA	
menutitle2 . . . . . . . . . . .	Byte	 000004BD _DATA	
menutitle3 . . . . . . . . . . .	Byte	 000004EB _DATA	
menutitle4 . . . . . . . . . . .	Byte	 0000051A _DATA	
menutitle5 . . . . . . . . . . .	Byte	 00000548 _DATA	
midSound . . . . . . . . . . . .	Byte	 00000000 _DATA	
moveDown . . . . . . . . . . . .	Byte	 000015A9 _DATA	
moveLeft . . . . . . . . . . . .	Byte	 000015A8 _DATA	
moveRight  . . . . . . . . . . .	Byte	 000015AA _DATA	
moveUp . . . . . . . . . . . . .	Byte	 000015A7 _DATA	
pacmanX  . . . . . . . . . . . .	Byte	 00000DBC _DATA	
pacmanY  . . . . . . . . . . . .	Byte	 00000DBD _DATA	
pellets  . . . . . . . . . . . .	Byte	 00000DC2 _DATA	
playerName . . . . . . . . . . .	Byte	 00000D7A _DATA	
playerText . . . . . . . . . . .	Byte	 00000DB2 _DATA	
pmtitle10  . . . . . . . . . . .	Byte	 000003BB _DATA	
pmtitle11  . . . . . . . . . . .	Byte	 0000040D _DATA	
pmtitle1 . . . . . . . . . . . .	Byte	 000000D9 _DATA	
pmtitle2 . . . . . . . . . . . .	Byte	 0000012B _DATA	
pmtitle3 . . . . . . . . . . . .	Byte	 0000017D _DATA	
pmtitle4 . . . . . . . . . . . .	Byte	 000001CF _DATA	
pmtitle5 . . . . . . . . . . . .	Byte	 00000221 _DATA	
pmtitle6 . . . . . . . . . . . .	Byte	 00000273 _DATA	
pmtitle7 . . . . . . . . . . . .	Byte	 000002C5 _DATA	
pmtitle8 . . . . . . . . . . . .	Byte	 00000317 _DATA	
pmtitle9 . . . . . . . . . . . .	Byte	 00000369 _DATA	
redTxt . . . . . . . . . . . . .	Number	 00000004h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreText  . . . . . . . . . . .	Byte	 00000D96 _DATA	
score  . . . . . . . . . . . . .	DWord	 00000D71 _DATA	
temp . . . . . . . . . . . . . .	Byte	 00000D6F _DATA	
userChoice . . . . . . . . . . .	Byte	 00000D6E _DATA	
username . . . . . . . . . . . .	Byte	 000000A7 _DATA	
wallChar . . . . . . . . . . . .	Byte	 00000DBB _DATA	
wallCount  . . . . . . . . . . .	Byte	 000015A6 _DATA	
walls  . . . . . . . . . . . . .	Byte	 00001592 _DATA	
whiteTxt . . . . . . . . . . . .	Number	 0000000Fh   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellowTxt  . . . . . . . . . . .	Number	 0000000Eh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   33 Errors
